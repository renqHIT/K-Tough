import collection.mutable.Stack
import org.scalatest._

class StackSpec extends FlatSpec {

  "A Stack" should "pop values in last-in-first-out order" in {
    val stack = new Stack[Int]
    stack.push(1)
    stack.push(2)
    assert(stack.pop() === 2)
    assert(stack.pop() === 1)
  }

  it should "throw NoSuchElementException if an empty stack is popped" in {
    val emptyStack = new Stack[String]
    intercept[NoSuchElementException] {
      emptyStack.pop()
    }
  }
}

"""
import org.scalatest.junit.JUnitSuite
import org.junit.Test

import org.scalatest.{Matchers, GivenWhenThen, FeatureSpec} 
class FeatureSpecTest1 extends FeatureSpec with GivenWhenThen with Matchers 
{  
  info("As an employee object consumer")  
  info("I want to be able to create an employee object")  
  info("So I can access the first name and last name")  
  info("And get the employee full name when I need it")  
  info("And also get the Social Security Number")  
  feature("Employee object") {    
    scenario("Create an employee object with first and last name") {  
      Given("an Employee object is created")     
      val employee = new Employee("Lukasz", "Szwed")      
      Then("the first name and last name should be set")      
      val firstName = employee.firstName    
      firstName should be ("Lukasz")      
      val lastName = employee.lastName      
      lastName should be ("Szwed")      
      Then("the full name should be set")      
      employee.fullName should be (firstName + " " + lastName)      
      Then("the ssn should be set")      
      employee.ssn should be ("000-00-0000")    
    } 
  } 
} 
//- See more at: http://tech.gilt.com/post/62430610230/which-scala-testing-tools-should-you-use#sthash.in4IfbMS.dpuf
"""
